// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  passwordHash String
  createdAt DateTime @default(now())
  workouts  Workout[]
  logs      Log[]
}

model Exercise {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  description String?
  createdAt   DateTime          @default(now())
  workoutExercises WorkoutExercise[]
}

model Workout {
  id          Int               @id @default(autoincrement())
  userId      Int
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  description String?
  createdAt   DateTime          @default(now())
  workoutExercises WorkoutExercise[]
  logs        Log[]
}

model WorkoutExercise {
  id         Int      @id @default(autoincrement())
  workoutId  Int
  workout    Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exerciseId Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  sets       Int      @default(1)
  repetitions String?
  weight     Float?
  order      Int      @default(1)
  logs       Log[]

  @@unique([workoutId, exerciseId, order]) // Ensure unique order within a workout
}

model Log {
  id                Int      @id @default(autoincrement())
  userId            Int
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutId         Int
  workout           Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutExerciseId Int
  workoutExercise   WorkoutExercise @relation(fields: [workoutExerciseId], references: [id], onDelete: Cascade)
  setNumber         Int
  repsCompleted     Int?
  weightUsed        Float?
  notes             String?
  loggedAt          DateTime @default(now())
}